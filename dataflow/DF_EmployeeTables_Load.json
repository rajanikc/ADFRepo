{
	"name": "DF_EmployeeTables_Load",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "LSAzureDLS",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "LSAzureSqlDatabase",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     PrmFileName as string,",
				"     TableName as string",
				"}",
				"source(useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'adlscontainer',",
				"     folderPath: 'InputDirectory',",
				"     fileName: ($PrmFileName),",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '',",
				"     columnNamesAsHeader: true) ~> source1",
				"source1 derive(ETL_CREATE_TIMESTAMP = currentTimestamp(),",
				"          ETL_UPDATE_TIMESTAMP = currentTimestamp(),",
				"          ETL_ACTIVE_FLAG = 'Y') ~> derivedColumn1",
				"derivedColumn1 alterRow(upsertIf(1==1)) ~> alterRow1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          idnumber as integer,",
				"          employeefirstname as string,",
				"          employeelastname as string,",
				"          update_date as date",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: ($TableName),",
				"     insertable: false,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: true,",
				"     keys:['idnumber'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}